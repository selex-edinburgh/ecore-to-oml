vocabulary <http://[%=ePackage.getPathFromNsURI()%]/vocabulary/[%=ePackage.name%]#> as [%=ePackage.name.firstToLowerCase%] {
  extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs
  extends <http://www.w3.org/2001/XMLSchema#> as xsd
  extends <http://[%=ePackage.getPathFromNsURI()%]/vocabulary/base#> as base

[% for (eEnum in eEnums) { %]
  @rdfs:comment ""
  scalar [%=eEnum.name%] [
    oneOf [%=eNum.getLiterals%]
  ]
[% } %]

[% for (eClass in eClasses) { %]
  @rdfs:comment ""
  concept [%=eClass.name%] < base:IdentifiedThing[%=eClass.getParentClasses()%]

[% for (eAttribute in eClass.getEAttributes) { %]
  [% if (eAttribute.name.equals("name")) continue; %]
  @rdfs:comment ""
  scalar property [%=eClass.name.firstToLowerCase%]_[%=eAttribute.name%] [
    domain [%=eClass.name%]
    range xsd:string
    functional
  ]
[% } %]  

[% for (eReference in eClass.eAllReferences) { %]
  @rdfs:comment ""
  relation entity [%=eClass.name + "_" + eReference.name + "_" + eReference.eType.name%] [
    from [%=eClass.name%]
    to [%=eReference.eType.name%]
    forward [%=eClass.name.firstToLowerCase + "_" + eReference.name + "_" + eReference.eType.name.firstToLowerCase%]
    [%if (eReference.eOpposite <> null) {%]
    reverse [%=eReference.eType.name.firstToLowerCase + "_" + eReference.eOpposite.name + "_" + eClass.name.firstToLowerCase%]    
    [% } else if (eReference.isContainment) { %]
    reverse [%=eReference.eType.name.firstToLowerCase + "_container_" + eReference.eContainer.name.firstToLowerCase%]
    [% } %]
    [%if (eReference.eOpposite <> null or eReference.isContainment) {%]
    symmetric        
    [% } else { %]
    asymmetric
    [% } %]
    [% if (not eReference.isMany) { %]
    functional
    [% } %]
    [% if (eReference.eOpposite <> null and not eReference.eOpposite.isMany) { %]
    inverse functional
    [% } %]
    [%if (eReference.isContainment) {%]
    irreflexive
    [% } else if (eReference.eType.equals(eClass)) { %]
    reflexive
    [% } %]
    transitive  
  ]
[%   }%]

[% } %]

}

[%

function ecore::EPackage getPathFromNsURI() {
	var uri = self.nsURI;
	uri = uri.replace("http://", "");
	uri = uri.replace("https://", "");
	return uri;
}

function ecore::EClass getParentClasses() {
    var parentNames = self.getESuperTypes.collect(s | s.name);
    var temp = parentNames.concat(", ");
    var names = (temp.length > 0)? ", " + temp : names;  
    return names;
}

function ecore::EEnum getLiterals() {
    var literals = self.getELiterals.concat(",\n");  
    return literals;
}

%]