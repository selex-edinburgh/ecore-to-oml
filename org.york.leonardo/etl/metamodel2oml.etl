import "../egx/ecore2oml.eol";

rule Metamodel2Vocabulary 
    transform ePackage : M2!EPackage 
    to vocabulary : V!Vocabulary {
		
    vocabulary.prefix = ePackage.nsPrefix;
    vocabulary.namespace = ePackage.nsURI + "#";
    
    var rdfImport = new V!Import;
    rdfImport.namespace = "http://www.w3.org/2000/01/rdf-schema#"; 
    rdfImport.prefix = "rdf";
    vocabulary.ownedImports.add(rdfImport);  
    
    var xsdImport = new V!Import;
    xsdImport.namespace = "http://www.w3.org/2001/XMLSchema#"; 
    xsdImport.prefix = "xsd";
    vocabulary.ownedImports.add(xsdImport);
    
    var baseImport = new V!Import;
    baseImport.namespace = ePackage.nsURI + "/vocabulary/base#"; 
    baseImport.prefix = "base";
    vocabulary.ownedImports.add(baseImport);
    
    // EENum
    for (eNum in M2!EEnum.all){
        var scalar = new V!Scalar;
        scalar.name = eNum.name;
        vocabulary.ownedStatements.add(scalar); 
    }
    
    // EClass
    for (eClass in M2!EClass.all){
        var concept = new V!Concept;
        concept.name = eClass.name;
        vocabulary.ownedStatements.add(concept);
    }
    
    // specialization axioms
    for (eClass in M2!EClass.all){
        var concept = V!Concept.all.selectOne( c | c.name == eClass.name);
        for (eSuperType in eClass.getESuperTypes) {
            var superConcept = V!Concept.all.selectOne( c | c.name == eSuperType.name); 
	        var specialization = new V!SpecializationAxiom;
	        specialization.superTerm = superConcept;
	        concept.ownedSpecializations.add(specialization);
        }
    }
    
    // Others
    for (eClass in M2!EClass.all){

        var concept = V!Concept.all.selectOne( c | c.name == eClass.name);

        // EAttribute
        for (eAttribute in eClass.eAttributes){
        
            var scalarProperty = new V!ScalarProperty;
            scalarProperty.name = eClass.name.firstToLowerCase + "_" + eAttribute.name;
            scalarProperty.getDomainList.add(concept);
        
            var range = eAttribute.getXsdType();
            scalarProperty.getRangeList.add(range);
            vocabulary.ownedStatements.add(scalarProperty);
            
            scalarProperty.functional = true;
        }
        
        // EReference
        for (eReference in eClass.eReferences){
            
            var relationEntity = new V!RelationEntity;
            relationEntity.name = eClass.name + "_" + eReference.name + "_" + eReference.eType.name;
            
            relationEntity.sources.add(concept);
            
            var targetConcept = V!Concept.all.selectOne( c | c.name == eReference.eType.name);
            relationEntity.targets.add(targetConcept);
            
            var forwardRelation = new V!ForwardRelation;
            forwardRelation.name = eClass.name.firstToLowerCase + "_" + eReference.name + "_" + eReference.eType.name.firstToLowerCase;
            relationEntity.forwardRelation = forwardRelation;
            
            var reverseRelation = new V!ReverseRelation;
            relationEntity.reverseRelation = reverseRelation;
            if (eReference.eOpposite <> null) {
		      reverseRelation.name = "rev_" + eReference.eType.name.firstToLowerCase + "_" + eReference.eOpposite.name + "_" + eClass.name.firstToLowerCase;    
		    } else if (eReference.isContainment) {
		      reverseRelation.name = eReference.eType.name.firstToLowerCase + "_in_" + eReference.name + "_" + eClass.name.firstToLowerCase;
		    }
                		    
		    if (eReference.eOpposite <> null or eReference.isContainment) {
		      relationEntity.symmetric = true;
		      relationEntity.asymmetric = false;        
		    } else {
		      relationEntity.symmetric = false; 
		      relationEntity.asymmetric = true;
		    } 
		    
		    if (not eReference.isMany) { 
		      relationEntity.functional = true;
		    } else {
		      relationEntity.functional = false;
		    }
		    
		    if (eReference.eOpposite <> null and not eReference.eOpposite.isMany) {
		      relationEntity.inverseFunctional = true;
		    } else {
		      relationEntity.inverseFunctional = false;
		    }

		    if (eReference.isContainment) {
		      relationEntity.irreflexive = true;
		    } else {
		      relationEntity.irreflexive = false;
		    }
		    
		    if (eReference.eType.equals(eClass)) { 
		      relationEntity.reflexive = false;
		    } else {
		      relationEntity.transitive = true;
		    } 
		    
		    relationEntity.transitive = true;
		    

            vocabulary.ownedStatements.add(relationEntity);
        }
    }    
    
    "Finished!".println;
}