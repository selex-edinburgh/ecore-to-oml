/***

M2 is metamodel
M1 is model

***/

import "ecore2oml.eol";


rule Metamodel2OML
	transform  ePackage : M2!EPackage {
	
	parameters : 
	   Map {
		"ePackage" = ePackage,
		"eEnums" = ePackage.getEClassifiers.select(e | e.isTypeOf(M2!ecore::EEnum)),
		"eClasses" = ePackage.getEClassifiers.select(e | e.isTypeOf(M2!ecore::EClass)),
		"iRIs" = ePackage.getIRIs()
	}
	template : "metamodel2oml.egl"
	target : "../../targetoml/src/oml/" + ePackage.getTargetVocabularyFile() + ".oml"
}


rule BaseOML transform  ePackage : M2!EPackage {
	
	parameters : 
	   Map {
		"ePackage" = ePackage,
		"eClassifiers" = ePackage.getEClassifiers
	}
	
	template : "baseoml.egl"
	target : "../../targetoml/src/oml/"+ ePackage.getBaseDir() + "/base.oml"
}

rule Model2OML {
    
    parameters : 
       Map {
        "modelName" = getModelName(),
        "eResource" = getEResource()
    }
    template : "model2oml.egl"
    target : "../../targetoml//src/oml/" + getTargetDescriptionDir() + "/"+ getModelName() + ".oml"
}

operation M2!ecore::EPackage getIRIs() {
    var map = Map{};
    for (eClass in self.getEClassifiers) {
        if (eClass.isKindOf(M2!ecore::EClass)) {
	        for (eReference in eClass.getEAllReferences){
	            map.put(eReference.eType.ePackage.nsURI, eReference.eType.ePackage.getPrefixOrName());
	        }
        }
    }
    //map.println;
    return map;
}
