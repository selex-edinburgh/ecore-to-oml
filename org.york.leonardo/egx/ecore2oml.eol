/***

M2 is metamodel
M1 is model

***/

operation SEPARATOR() {
    return "_";
}

operation getPathFromNsURI() {
    var eResource = M1.getResource();
    var eObject = eResource.getContents.first;
    return eObject.eClass.ePackage.getPathFromNsURI();
}

operation getTargetDescriptionDir() {
    var path = getPathFromNsURI();
    var lastIndex = path.lastIndexOf("/");
    path = path.subString(0, lastIndex);
    return path + "/description";
}

operation getEResource() {
    var eResource = M1.getResource();
    return eResource;
}

operation getModelName(){
    var eResource = M1.getResource();
    var name = null;
    if (eResource.getURI <> null) {
	    var path = eResource.getURI.toString;
	    var startIndex = path.lastIndexOf("/");
	    var endIndex = path.lastIndexOf(".");
	    name = path.substring(startIndex + 1, endIndex);
    } else {
        var eObject = eResource.getContents.first;
        name = eObject.eClass.ePackage.nsPrefix;
    }
    return name;
}

operation M1!ecore::EObject getName(){
    var name = null;
    if (self.eClass.getEStructuralFeature("name") <> null) {
        name = self.name; 
    }
    if (name == null or name.trim.length == 0) {
        name = self.eClass.name.firstToLowerCase;
    }
    if (self.eContainer != null) {
        name = self.eContainer.getName().firstToLowerCase + SEPARATOR() + name.firstToLowerCase;
    }
    if (self.eContainer <> null and self.eContainingFeature.isMany) {
        var collection = self.eContainer.eGet(self.eContainingFeature);
        if (collection.size > 0) {
            var pos = collection.indexOf(self);
            name = name + SEPARATOR() + pos;
        }
    }
     
    return name;
}

operation M2!ecore::EReference getNameWithPrefix(packageName: String) {
    var name = self.eType.name;
    
    if (packageName != self.eType.ePackage.name){
        name =  self.eType.ePackage.getPrefixOrName() + ":" + name;
    }
    return name;
}

operation M2!ecore::EPackage getPathFromNsURI() {
    var uri = self.nsURI;
    uri = uri.replace("http://", "");
    uri = uri.replace("https://", "");
    return uri;
}

operation M2!ecore::EPackage getTargetVocabularyFile() {
    var path = self.getPathFromNsURI();
    return path;
}

operation M2!ecore::EPackage getBaseDir() {
    var path = self.getPathFromNsURI();
    var lastIndex = path.lastIndexOf("/");
    path = path.subString(0, lastIndex);
    return path;
}

operation M2!ecore::EPackage getPrefixOrName() {
    var name = self.nsPrefix;
    if (name == null or name.trim.length == 0)
        name = self.name;
   return name;
}

operation M2!ecore::EClass getParentClasses() {
    var parentNames = self.getESuperTypes.collect(s | s.name);
    var temp = parentNames.concat(", ");
    var names = (temp.length > 0)? ", " + temp : names;  
    return names;
}

operation M2!ecore::EEnum getLiterals() {
    var literals = "\"" + self.getELiterals.concat("\",\n\"") + "\"";   
    return literals;
}

operation M2!ecore::EStructuralFeature isSet(eObject) {
    var isSet = false;
    if (eObject.eClass.ePackage.nsURI == self.eClass.ePackage.nsURI
        and eObject.eClass.ePackage.nsPrefix == self.eClass.ePackage.nsPrefix
        and eObject.eClass.ePackage.name == self.eClass.ePackage.name) {
        isSet = true;  
    } else {
        isSet = eObject.eIsSet(self);
    }
    return isSet;
}

operation M2!ecore::EObject isSet(eStructuralFeature) {
    var isSet = self.eIsSet(eStructuralFeature); 
    return isSet;
}

operation M2!ecore::EAttribute getXsdType(){
    var type = null; 
    if (self.eType.name.equals("EString") or self.eType.instanceClassName == "java.lang.String") {
       type = "xsd:string";
    } else if (self.eType.name.equals("EBoolean") or self.eType.name.equals("EBooleanObject") or self.eType.instanceClassName == "boolean") {
       type = "xsd:boolean";
    } else if (self.eType.name.equals("EByte") or self.eType.name.equals("EByteObject") or self.eType.instanceClassName == "byte") {
       type = "xsd:byte";
    } else if (self.eType.name.equals("EChar") or self.eType.name.equals("ECharacterObject") or self.eType.instanceClassName == "char") {
       type = "xsd:string";
    } else if (self.eType.name.equals("EDouble") or self.eType.name.equals("EDoubleObject") or self.eType.instanceClassName == "double") {
       type = "xsd:double";
    } else if (self.eType.name.equals("EFloat") or self.eType.name.equals("EFloatObject") or self.eType.instanceClassName == "float") {
       type = "xsd:float";
    } else if (self.eType.name.equals("EInt") or self.eType.name.equals("EIntegerObject") or self.eType.instanceClassName == "int") {
       type = "xsd:integer";
    } else if (self.eType.name.equals("ELong") or self.eType.name.equals("ELongObject")) {
       type = "xsd:long";
    } else if (self.eType.name.equals("EShort") or self.eType.name.equals("EShortObject")) {
       type = "xsd:short";
    } else if (self.eType.name.equals("EJavaObject")) {
       type = "xsd:string";
    } else if (self.eType.name.equals("EJavaClass")) {
       type = "xsd:string";
    } else if (self.eType.name.equals("EEnumerator")) {
       type = "xsd:string";
    } else if (self.eType.name.equals("EFeatureMapEntry")) {
       type = "xsd:string";
    } else if (self.eType.isTypeOf(M2!ecore::EEnum)) {
       type = self.eType.name;
    } else {
        self.eType.println(" Unsupported Type so return 'xsd:string': ");
        type = "xsd:string"; 
    }
    
    return type;
//	EBoolean
//	EByte
//	EChar
//	EDouble
//	EFloat
//	EInt
//	ELong
//	EShort
//	EJavaObject
//	EJavaClass
//	EBooleanObject
//	EByteObject
//	ECharacterObject
//	EDoubleObject
//	EFloatObject
//	EIntegerObject
//	ELongObject
//	EShortObject
//	EByteArray
//	
//	EDate
//	EBigInteger
//	EBigDecimal
//	EResource
//	EResourceSet
//	EFeatureMap
//	EFeatureMapEntry
//	EEnumerator
//	EEList
//	ETreeIterator
}

//anyURI, base64Binary, boolean, date, dateTime, decimal, double, duration, float, hexBinary, gDay, gMonth, gMonthDay, gYear, gYearMonth, NOTATION, QName, string, and time

//byte    Used to define a signed 8-bit integer.
//decimal Used to define a decimal value.
//int Used to define a signed 32-bit integer.
//integer Used to define an integer value.
//long    Used to define a signed 64-bit integer.
//negativeInteger Used to define an integer containing only negative values (..,-2,-1).
//nonNegativeInteger  Used to define an integer containing only non-negative values (0,1,2,..).
//nonPositiveInteger  Used to define an integer containing only non-positive values (..,-2,-1,0).
//positiveInteger Used to define an integer containing only positive values (1,2,..).
//short   Used to define a signed 16-bit integer.
//unsignedLong    Used to define an unsigned 64-bit integer.
//unsignedInt Used to define an unsigned 32-bit integer.
//unsignedShort   Used to define an unsigned 16-bit integer.
//unsignedByte    Used to define an unsigned 8-bit integer.