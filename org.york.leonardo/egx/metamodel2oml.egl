[% import "ecore2oml.eol"; %]
vocabulary <http://[%=ePackage.getPathFromNsURI()%]/vocabulary/[%=ePackage.name%]#> as [%=ePackage.name.firstToLowerCase%] {
  extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs
  extends <http://www.w3.org/2001/XMLSchema#> as xsd
  extends <http://[%=ePackage.getPathFromNsURI()%]/vocabulary/base#> as base

[% for (eEnum in eEnums) { %]
  @rdfs:comment ""
  scalar [%=eEnum.name%] [
    oneOf [%=eEnum.getLiterals()%]
  ]
[% } %]

[% for (eClass in eClasses) { %]
  @rdfs:comment ""
  concept [%=eClass.name%] < base:IdentifiedThing[%=eClass.getParentClasses()%]

[% for (eAttribute in eClass.getEAttributes) { %]
  @rdfs:comment ""
  scalar property [%=eClass.name.firstToLowerCase%]_[%=eAttribute.name%] [
    domain [%=eClass.name%]
    range [%=eAttribute.getXsdType()%]
    functional
  ]
[% } %]  

[% for (eReference in eClass.eAllReferences) { %]
  @rdfs:comment ""
  relation entity [%=eClass.name + "_" + eReference.name + "_" + eReference.eType.name%] [
    from [%=eClass.name%]
    to [%=eReference.eType.name%]
    forward [%=eClass.name.firstToLowerCase + "_" + eReference.name + "_" + eReference.eType.name.firstToLowerCase%]
    [%if (eReference.eOpposite <> null) {%]
    reverse [%="rev_" + eReference.eType.name.firstToLowerCase + "_" + eReference.eOpposite.name + "_" + eClass.name.firstToLowerCase%]    
    [% } else if (eReference.isContainment) { %]
    reverse [%=eReference.eType.name.firstToLowerCase + "_in_" + eReference.name + "_" + eClass.name.firstToLowerCase%]
    [% } %]
    [%if (eReference.eOpposite <> null or eReference.isContainment) {%]
    symmetric        
    [% } else { %]
    asymmetric
    [% } %]
    [% if (not eReference.isMany) { %]
    functional
    [% } %]
    [% if (eReference.eOpposite <> null and not eReference.eOpposite.isMany) { %]
    inverse functional
    [% } %]
    [%if (eReference.isContainment) {%]
    irreflexive
    [% } else if (eReference.eType.equals(eClass)) { %]
    reflexive
    [% } %]
    transitive  
  ]
[%   }%]

[% } %]

}
